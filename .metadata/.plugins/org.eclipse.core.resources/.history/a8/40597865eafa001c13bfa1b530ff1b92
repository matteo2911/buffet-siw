package it.uniroma3.siw.spring.controller;

import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import it.uniroma3.siw.spring.model.Buffet;
import it.uniroma3.siw.spring.model.Chef;
import it.uniroma3.siw.spring.model.Credentials;
import it.uniroma3.siw.spring.model.Ingrediente;
import it.uniroma3.siw.spring.model.Piatto;
import it.uniroma3.siw.spring.service.BuffetService;
import it.uniroma3.siw.spring.service.ChefService;

@Controller
public class ChefController {
	
	@Autowired
	private ChefService chefService;
	
	@Autowired
	private BuffetService buffetService;
	
    @Autowired
    private ChefValidator chefValidator;
    
    private final Logger logger = LoggerFactory.getLogger(this.getClass());
    

    @RequestMapping(value="/admin/addChef", method = RequestMethod.GET)
    public String addArtista(Model model) {
    	logger.debug("addChef");
    	model.addAttribute("chef", new Chef());
        return "chefForm.html";
    }

    @RequestMapping(value = "/chef/{id}", method = RequestMethod.GET)
    public String getArtista(@PathVariable("id") Long id, Model model) {
    	Chef c=this.chefService.chefPerId(id);
    	UserDetails userDetails = (UserDetails)SecurityContextHolder.getContext().getAuthentication().getPrincipal();
    	Credentials credentials = this.chefService.getCredentialsService().getCredentials(userDetails.getUsername());
    	model.addAttribute("credentials",credentials);
    	model.addAttribute("chef", c);
    	model.addAttribute("buffetChef",c.getBuffets());
    	return "chef.html";
    }

    
    
    @RequestMapping(value = "/chef", method = RequestMethod.GET)
    public String getArtisti(Model model) {
    		model.addAttribute("chefs", this.chefService.tutti());
    		return "chefs.html";
    }
    
    @RequestMapping(value = "/admin/chef", method = RequestMethod.POST)
    public String newArtista( @ModelAttribute("chef") Chef chef, 
    									Model model, BindingResult bindingResult  ) {
  
    	this.chefValidator.validate(chef, bindingResult);
        if (!bindingResult.hasErrors()) {
        	
        	
        	this.chefService.inserisci(chef);
            model.addAttribute("chefs", this.chefService.tutti());
            return "chefs.html";
        }
        model.addAttribute("chef", new Chef());
        return "chefForm.html";
    }


    @RequestMapping(value = "/admin/eliminaChef/{id}", method = RequestMethod.POST)
    public String eliminaChef(Model model, @PathVariable("id") Long id) {
    		
    		Chef c=chefService.chefPerId(id);
    		
    		List<Buffet> buffets=chefService.getBuffetChef(c);
    		for(Buffet b: buffets) {
        		
        		List<Piatto> piatti=buffetService.getPiattoBuffet(b);
        		for(Piatto p: piatti) {
        			
        			List<Ingrediente> ingredientiP = new ArrayList<>( p.getIngredienti());
            		
            		for(Ingrediente i: ingredientiP) {
            			
            			p.rimuoviIngrediente(i);
            			i.removePiatto(p);		
            		}
        			
        			
        			buffetService.getPiattoService().eliminaPiatto(p);
        		}
    			
    			chefService.getBuffetService().eliminaBuffet(b);
    			
    			
    		}
    		
    		chefService.eliminaChef(c);
    		model.addAttribute("chef", this.chefService.tutti());
    		return "chefs.html";
    }
    
    
    
    
    
    
    @RequestMapping(value="/admin/modificaChef/{id}", method = RequestMethod.GET)
    public String modificaChef(Model model,@PathVariable("id") Long id) {
    	Chef c= chefService.chefPerId(id);
    	model.addAttribute("chef", c);
    	//model.addAttribute("artisti", canzoneService.getArtistaService().tutti());
        return "modificaChefForm.html";
    	}
    
    
    @RequestMapping(value = "/admin/chef/{id}", method = RequestMethod.POST)
    public String modificaChef(@ModelAttribute("chef") Chef chef, Model model,BindingResult bindingResult, @PathVariable("id") Long Id) {
     
     chef.setId(Id);
     chefService.inserisci(chef);
     chef=chefService.chefPerId(Id);
     model.addAttribute("chef", chef);
    
    	UserDetails userDetails = (UserDetails)SecurityContextHolder.getContext().getAuthentication().getPrincipal();
    	Credentials credentials = this.chefService.getCredentialsService().getCredentials(userDetails.getUsername());
    	model.addAttribute("credentials", credentials);
    	
    	return "chef.html";
         }
}