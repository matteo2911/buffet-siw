package it.uniroma3.siw.spring.service;
import it.uniroma3.siw.spring.repository.PiattoRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import javax.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import it.uniroma3.siw.spring.model.Buffet;
import it.uniroma3.siw.spring.model.Ingrediente;
import it.uniroma3.siw.spring.model.Piatto;





@Service
public class PiattoService {
	
	
	@Autowired
	private PiattoRepository piattoRepository; 

	@Autowired
	private BuffetService buffetService;

	@Autowired
	private CredentialsService credentialsService;
	
	@Autowired
	private IngredienteService ingredienteService;

	@Transactional
	public Piatto inserisci(Piatto piatto) {
		return piattoRepository.save(piatto);
	}
	
	@Transactional
	public List<Piatto> piattoPerNome(String nome) {
		return piattoRepository.findByNome(nome);
	}
	
	@Transactional
	public List<Piatto> tutti() {
		return (List<Piatto>) piattoRepository.findAll();
	}
	
	@Transactional
	public Piatto piattoPerId(Long id) {
		Optional<Piatto> optional = piattoRepository.findById(id);
		if (optional.isPresent())
			return optional.get();
		else 
			return null;
	}

	@Transactional
	public boolean alreadyExists(Piatto piatto) {
		List<Piatto> piatti = this.piattoRepository.findByNome(piatto.getNome());
		if (piatti.size() > 0)
			return true;
		else 
			return false;
	}
	
	@Transactional
	public List<Piatto> filtraLista(List<Piatto> lista) {
		List<Piatto> piatti=this.tutti();
		for(Piatto p:lista) {	//rimuovo opere che appartengono già alla collezione
			piatti.remove(p);
		}
		return piatti;
	}

	@Transactional
	public void eliminaPiatto(Piatto p) {
		piattoRepository.delete(p);
	}
	
	public CredentialsService getCredentialsService() {
		return credentialsService;
	}

	public void setCredentialsService(CredentialsService credentialsService) {
		this.credentialsService = credentialsService;
	}

	public BuffetService getBuffetService() {
		return buffetService;
	}
	

	public List<Piatto> getPiattiFiltered(Buffet b) {
		List<Piatto> filtrato=new ArrayList<Piatto>();
		for(Piatto s : this.tutti()) {
			if(!b.getPiatti().contains(s))
				filtrato.add(s);
		}
		
		return filtrato;			
	}
	
	
	@Transactional
	public List<Piatto> getPiattiFiltered(){
		List<Piatto> filtrato=new ArrayList<>();
		for(Piatto p: this.tutti()) {
			if(p.getBuffet()==null)
				filtrato.add(p);
		}
		return filtrato;
	}
	
	
	public IngredienteService getIngredienteService() {
		return ingredienteService;
	}


	@Transactional
	public List<Ingrediente> getIngredientePiatto(Piatto p){
		
		
		List<Ingrediente> lista = new ArrayList<>();
		
		for(Ingrediente i: ingredienteService.tutti()) {
			if(i.getPiatti()== p)
				lista.add(i);
		}
		return lista;
	}
}










//	@Autowired
//	private ChefService chefService;
//
//	public IngredienteService getIngredienteService() {
//		return ingredienteService;
//	}



//	fatto   @Transactional
//	public Buffet inserisci(Buffet buffet) {
//		return buffetRepository.save(buffet);
//	}

//	@Transactional
//	public List<Buffet> canzonePerNome(String nome) {
//		return buffetRepository.findByNome(nome);
//	}

//	@Transactional
//	public List<Buffet> tutti() {
//		return (List<Buffet>) buffetRepository.findAll();
//	}

//	@Transactional
//	public Buffet buffetPerId(Long id) {
//		Optional<Buffet> optional = buffetRepository.findById(id);
//		if (optional.isPresent())
//			return optional.get();
//		else 
//			return null;
//	}
//
//	@Transactional
//	public boolean alreadyExists(Buffet buffet) {
//		List<Buffet> buffets = this.buffetRepository.findByNome(buffet.getNome());
//		if (buffets.size() > 0)
//			return true;
//		else 
//			return false;
//	}


//	@Transactional
//	public List<Buffet> filtraLista(List<Buffet> lista) {
//		List<Buffet> buffets=this.tutti();
//		for(Buffet b:lista) {	//rimuovo opere che appartengono già alla collezione
//			buffets.remove(b);
//		}
//		return buffets;
//	}
//
//	@Transactional
//	public void eliminaBuffet(Buffet b) {
//		buffetRepository.delete(b);
//	}

	/*@Transactional
	public List<Canzone> getCanzoniFiltered(){
		List<Canzone> filtrato=new ArrayList<>();
		for(Canzone o: this.tutti()) {
			if(o.getConcerto()==null)
				filtrato.add(o);
		}
		return filtrato;
	}*/


//	public void setChefService1(ChefService chefService) {
//		this.chefService = chefService;
//	}
////	
//	public boolean isArtistaLibero(Chef a, Concerto c) {
//		boolean isDisp=true;
//		for(Canzone s :a.getCanzoni()) {
//			for(Concerto p:s.getConcerti())
//				if((p.getDataConcerto().equals(c.getDataConcerto())&&!p.equals(c)))
//					isDisp=false;
//		}
//		return isDisp;
//	}

//	public List<Buffet> getCanzoniFiltered(Concerto c) {
//		List<Buffet> filtrato=new ArrayList<>();
//		List<Buffet> filtrato2=new ArrayList<>();
//		for(Buffet s : this.tutti()) {
//			if(isArtistaLibero(s.getArtista(),c)&&!c.getCanzoni().contains(s))
//				filtrato.add(s);
//		}
//		
//		return filtrato;			
//	}

