package it.uniroma3.siw.spring.controller;

import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import it.uniroma3.siw.spring.model.Credentials;
import it.uniroma3.siw.spring.model.Ingrediente;
import it.uniroma3.siw.spring.model.Piatto;
import it.uniroma3.siw.spring.model.Buffet;
import it.uniroma3.siw.spring.model.Chef;
import it.uniroma3.siw.spring.service.BuffetService;

@Controller
public class BuffetController {
	
	@Autowired
	private BuffetService buffetService;
	
    @Autowired
    private BuffetValidator buffetValidator;
    
    private final Logger logger = LoggerFactory.getLogger(this.getClass());
    

    @RequestMapping(value="/admin/addBuffet", method = RequestMethod.GET)
    public String addBuffet(Model model) {
    	
    	model.addAttribute("buffet", new Buffet());
    	model.addAttribute("chefs", buffetService.getChefService().tutti());
        return "buffetForm.html";
    }

    @RequestMapping(value = "/buffet/{id}", method = RequestMethod.GET)
    public String getBuffet(@PathVariable("id") Long id, Model model) {
    	Buffet b=buffetService.buffetPerId(id);
    	model.addAttribute("buffet", b);
    	model.addAttribute("chef",b.getChef());
    	model.addAttribute("piattiBuffet",b.getPiatti());
    	UserDetails userDetails = (UserDetails)SecurityContextHolder.getContext().getAuthentication().getPrincipal();
    	Credentials credentials = this.buffetService.getCredentialsService().getCredentials(userDetails.getUsername());
    	model.addAttribute("credentials", credentials);
    	//model.addAttribute("concerti",o.getConcerti());
    	return "buffet.html";
    }

    @RequestMapping(value = "/buffet", method = RequestMethod.GET)
    public String getBuffets(Model model) {
    		model.addAttribute("buffets", this.buffetService.tutti());
    		return "buffets.html";
    }
    
    @RequestMapping(value = "/admin/buffet", method = RequestMethod.POST)
    public String newBuffet(@ModelAttribute("buffets") Buffet buffet, 
    									Model model, BindingResult bindingResult) {
    	this.buffetValidator.validate(buffet, bindingResult);
        if (!bindingResult.hasErrors()) {
        	
        	this.buffetService.inserisci(buffet);
            model.addAttribute("buffets", this.buffetService.tutti());
            return "buffets.html";
        }
        model.addAttribute("buffet", new Buffet());
        model.addAttribute("chefs", buffetService.getChefService().tutti());
        return "buffetForm.html";
    }
    
    @RequestMapping(value = "/admin/eliminaBuffet/{id}", method = RequestMethod.POST)
    public String eliminaBuffet(Model model, @PathVariable("id") Long idBuffet) {
    		
    		Buffet b=buffetService.buffetPerId(idBuffet);
    		
    		List<Piatto> piatti=buffetService.getPiattoBuffet(b);
    		for(Piatto p: piatti) {
    			
    			List<Ingrediente> ingredientiP = new ArrayList<>( p.getIngredienti());
        		
        		for(Ingrediente i: ingredientiP) {
        			
        			p.rimuoviIngrediente(i);
        			i.removePiatto(p);		
        		}
    			
    			buffetService.getPiattoService().eliminaPiatto(p);
    		}
    		
    		
    		buffetService.eliminaBuffet(b);
    		model.addAttribute("buffets", this.buffetService.tutti());
    		return "buffets.html";
    }
    
    
    @RequestMapping(value = "/admin/addPiattoABuffet/{id}", method = RequestMethod.POST)
    public String aggiungiPiatto(@RequestParam("piatto") Long idPiatto, 
    									Model model, @PathVariable("id") Long idBuffet) {
    	
    	Piatto p=buffetService.getPiattoService().piattoPerId(idPiatto);
    	Buffet b = this.buffetService.buffetPerId(idBuffet);
    	p.setBuffet(b);
    	buffetService.getPiattoService().inserisci(p);
    	model.addAttribute("buffet", this.buffetService.buffetPerId(idBuffet));
    	model.addAttribute("piatti",buffetService.getPiattoService().getPiattiFiltered());
    	model.addAttribute("piattiBuffet",b.getPiatti());
    	
    	UserDetails userDetails = (UserDetails)SecurityContextHolder.getContext().getAuthentication().getPrincipal();
    	Credentials credentials = this.buffetService.getCredentialsService().getCredentials(userDetails.getUsername());
    	model.addAttribute("credentials", credentials);
    	return "buffet.html";
    }
    
    @RequestMapping(value = "/admin/rimuoviPiatto/{id}", method = RequestMethod.POST)
    public String rimuoviPiatto(@RequestParam("piatto") Long idPiatto, 
    									Model model, @PathVariable("id") Long idBuffet) {
    	Buffet b = this.buffetService.buffetPerId(idBuffet);
    	Piatto p=buffetService.getPiattoService().piattoPerId(idPiatto);
    	p.setBuffet(null);
    	buffetService.getPiattoService().inserisci(p);
    	model.addAttribute("buffet", b);
    	model.addAttribute("piatti",buffetService.getPiattoService().getPiattiFiltered());
    	model.addAttribute("piattiBuffet",b.getPiatti());
    	
    	UserDetails userDetails = (UserDetails)SecurityContextHolder.getContext().getAuthentication().getPrincipal();
    	Credentials credentials = this.buffetService.getCredentialsService().getCredentials(userDetails.getUsername());
    	model.addAttribute("credentials", credentials);
    	return "buffet.html";
    }
    
    
    
    @RequestMapping(value="/admin/modificaBuffet/{id}", method = RequestMethod.GET)
    public String modificaBuffet(Model model,@PathVariable("id") Long id) {
    	Buffet b= buffetService.buffetPerId(id);
    	model.addAttribute("buffet", b);
    	model.addAttribute("chefs", buffetService.getChefService().tutti());
        return "modificaBuffetForm.html";
    	}
    
    
    @RequestMapping(value = "/admin/buffet/{id}", method = RequestMethod.POST)
    public String modificaBuffet(@ModelAttribute("canzone") Buffet buffet, Model model,BindingResult bindingResult, @PathVariable("id") Long Id) {
     buffet.setId(Id);
//     canzone.setConcerti(canzoneService.canzonePerId(Id).getConcerti());
     buffetService.inserisci(buffet);
     buffet=buffetService.buffetPerId(Id);
     model.addAttribute("buffet", buffet);
    	model.addAttribute("chef",buffet.getChef());
    	UserDetails userDetails = (UserDetails)SecurityContextHolder.getContext().getAuthentication().getPrincipal();
    	Credentials credentials = this.buffetService.getCredentialsService().getCredentials(userDetails.getUsername());
    	model.addAttribute("credentials", credentials);
    	model.addAttribute("piattiBuffet",buffetService.getPiattoBuffet(buffet));
//    	model.addAttribute("concerti",canzone.getConcerti());
    	return "buffet.html";
         }
    
    
}
