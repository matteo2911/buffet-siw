package it.uniroma3.siw.spring.controller;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import it.uniroma3.siw.spring.model.Credentials;
import it.uniroma3.siw.spring.model.Ingrediente;
import it.uniroma3.siw.spring.model.Piatto;
import it.uniroma3.siw.spring.service.IngredienteService;

@Controller
public class IngredienteController {
	
	@Autowired
	private IngredienteService ingredienteService;
	
    @Autowired
    private IngredienteValidator ingredienteValidator;
    
    private final Logger logger = LoggerFactory.getLogger(this.getClass());
    

    @RequestMapping(value="/admin/addIngrediente", method = RequestMethod.GET)
    public String addIngrediente(Model model) {
    	
    	model.addAttribute("ingrediente", new Ingrediente());
//    	model.addAttribute("buffets", ingredienteService.getBuffetService().tutti());
        return "ingredienteForm.html";
    }

    @RequestMapping(value = "/ingrediente/{id}", method = RequestMethod.GET)
    public String getIngrediente(@PathVariable("id") Long id, Model model) {
    	Ingrediente i=ingredienteService.ingredientePerId(id);
    	model.addAttribute("ingrediente", i);
//    	model.addAttribute("artista",i.getArtista());
    	UserDetails userDetails = (UserDetails)SecurityContextHolder.getContext().getAuthentication().getPrincipal();
    	Credentials credentials = this.ingredienteService.getCredentialsService().getCredentials(userDetails.getUsername());
    	model.addAttribute("credentials", credentials);
    	//model.addAttribute("buffets",i.getPiatto());
    	return "ingrediente.html";
    }

    @RequestMapping(value = "/ingredienti", method = RequestMethod.GET)
    public String getIngredienti(Model model) {
    		model.addAttribute("ingredienti", this.ingredienteService.tutti());
    		return "ingredienti.html";
    }
    
    
    
//    @RequestMapping(value = "/admin/piatto", method = RequestMethod.POST)
//    public String newPiatto(@ModelAttribute("piatti") Piatto piatto, 
//    									Model model, BindingResult bindingResult) {
//    	this.piattoValidator.validate(piatto, bindingResult);
//        if (!bindingResult.hasErrors()) {
//        	
//        	this.piattoService.inserisci(piatto);
//            model.addAttribute("piatti", this.piattoService.tutti());
//            return "piatti.html";
//        }
//        model.addAttribute("piatto", new Piatto());
//        model.addAttribute("buffets", piattoService.getBuffetService().tutti());
//        return "piattoForm.html";
//    }
    
    
    
    @RequestMapping(value = "/admin/ingrediente", method = RequestMethod.POST)
    public String newIngrediente(@ModelAttribute("ingrediente") Ingrediente ingrediente, 
    									Model model, BindingResult bindingResult) {
    	this.ingredienteValidator.validate(ingrediente, bindingResult);
        if (!bindingResult.hasErrors()) {
        	
        	this.ingredienteService.inserisci(ingrediente);
            model.addAttribute("ingredienti", this.ingredienteService.tutti());
            return "ingredienti.html";
        }
        model.addAttribute("ingrediente", new Ingrediente());
//      model.addAttribute("artisti", canzoneService.getArtistaService().tutti());
        return "ingredienteForm.html";
    }
    
    @RequestMapping(value = "/admin/eliminaIngrediente/{id}", method = RequestMethod.POST)
    public String eliminaIngrediente(Model model, @PathVariable("id") Long idIngrediente) {
    		
    		Ingrediente i=ingredienteService.ingredientePerId(idIngrediente);
    		ingredienteService.eliminaIngrediente(i);
    		model.addAttribute("ingredienti", this.ingredienteService.tutti());
    		return "ingredienti.html";
    }
}
