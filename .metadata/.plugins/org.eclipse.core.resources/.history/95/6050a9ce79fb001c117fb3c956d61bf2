package it.uniroma3.siw.spring.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import it.uniroma3.siw.spring.model.Ingrediente;
import it.uniroma3.siw.spring.model.Piatto;
import it.uniroma3.siw.spring.repository.IngredienteRepository;
@Service
public class IngredienteService {


	@Autowired
	private IngredienteRepository ingredienteRepository; 

	@Autowired
	private PiattoService piattoService;

	@Autowired
	private CredentialsService credentialsService;

	public PiattoService getPiattoService() {
		return piattoService;
	}

	@Transactional
	public Ingrediente inserisci(Ingrediente ingrediente) {
		return ingredienteRepository.save(ingrediente);
	}

	@Transactional
	public List<Ingrediente> ingredientePerNome(String nome) {
		return ingredienteRepository.findByNome(nome);
	}

	@Transactional
	public List<Ingrediente> tutti() {
		return (List<Ingrediente>) ingredienteRepository.findAll();
	}

	@Transactional
	public Ingrediente ingredientePerId(Long id) {
		Optional<Ingrediente> optional = ingredienteRepository.findById(id);
		if (optional.isPresent())
			return optional.get();
		else 
			return null;
	}

	@Transactional
	public boolean alreadyExists(Ingrediente ingrediente) {
		List<Ingrediente> ingredienti = this.ingredienteRepository.findByNome(ingrediente.getNome());
		if (ingredienti.size() > 0)
			return true;
		else 
			return false;
	}


	@Transactional
	public List<Ingrediente> filtraLista(List<Ingrediente> lista) {
		List<Ingrediente> ingredienti=this.tutti();
		for(Ingrediente c:lista) {	//rimuovo opere che appartengono gi√† alla collezione
			ingredienti.remove(c);
		}
		return ingredienti;
	}

	@Transactional
	public void eliminaIngrediente(Ingrediente c) {
		ingredienteRepository.delete(c);
	}

//	@Transactional
//	public List<Ingrediente> getIngredientiFiltered(){
//		List<Ingrediente> filtrato=new ArrayList<>();
//		for(Ingrediente o: this.tutti()) {
//			if(o.getPiatto()==null)
//				filtrato.add(o);
//		}
//		return filtrato;
//	}

	public CredentialsService getCredentialsService() {
		return credentialsService;
	}

	public void setCredentialsService(CredentialsService credentialsService) {
		this.credentialsService = credentialsService;
	}

	public void setPiattoService(PiattoService piattoService) {
		this.piattoService = piattoService;
	}
	
//	public boolean isArtistaLibero(Artista a, Concerto c) {
//		boolean isDisp=true;
//		for(Canzone s :a.getCanzoni()) {
//			for(Concerto p:s.getConcerti())
//				if((p.getDataConcerto().equals(c.getDataConcerto())&&!p.equals(c)))
//					isDisp=false;
//		}
//		return isDisp;
//	}

	public List<Ingrediente> getIngredientiFiltered(Piatto p) {
		List<Ingrediente> filtrato=new ArrayList<>();
		for(Ingrediente i : this.tutti()) {
			if(!p.getIngredienti().contains(i))
				filtrato.add(i);
		}
		
		return filtrato;			
	}
}


	


